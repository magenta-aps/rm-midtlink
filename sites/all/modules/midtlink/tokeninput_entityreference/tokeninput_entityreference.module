<?php

/**
 * @file
 * Tokeninput Entity Reference module.
 * 
 * Provides a widget for entityreference fields that can autocomplete using the
 * jQuery Tokeninput plugin.
 */

/**
 * Implements hook_menu().
 */
function tokeninput_entityreference_menu() {
  $items['entityreference/autocomplete/tokeninput/%/%/%'] = array(
    'page callback' => 'tokeninput_entityreference_callback',
    'page arguments' => array(2, 3, 4, 5),
    'access arguments' => array('access content'),
    // We use entityreference's access callback here, since it's the same.
    'access callback' => 'entityreference_autocomplete_access_callback',
    'access arguments' => array(2, 3, 4, 5),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_field_widget_info().
 */
function tokeninput_entityreference_field_widget_info() {
  return array(
    'tokeninput_entityreference' => array(
      'label' => t('Autocomplete token input'),
      'field types' => array('entityreference'),
      'settings' => array(
        'match_operator' => 'STARTS_WITH',
        'size' => 60,
        'path' => '',
        'theme' => 'facebook',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
      'weight' => 100,
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function tokeninput_entityreference_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'] + field_info_widget_settings($widget['type']);

  $form = array();

  if ($widget['type'] == 'tokeninput_entityreference') {
    $form['match_operator'] = array(
      '#type' => 'select',
      '#title' => t('Autocomplete matching'),
      '#default_value' => $settings['match_operator'],
      '#options' => array(
        'STARTS_WITH' => t('Starts with'),
        'CONTAINS' => t('Contains'),
      ),
      '#description' => t('Select the method used to collect autocomplete suggestions. Note that <em>Contains</em> can cause performance issues on sites with thousands of nodes.'),
    );
    $form['size'] = array(
      '#type' => 'textfield',
      '#title' => t('Size of textfield'),
      '#default_value' => $settings['size'],
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required' => TRUE,
    );
    $form['theme'] = array(
      '#type' => 'textfield',
      '#title' => t('Theme'),
      '#default_value' => $settings['theme'],
      '#description' => t('Set this to a string, eg "facebook" when including theme css files to set the css class suffix.'),
    );
  }

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function tokeninput_entityreference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $entity_type = $instance['entity_type'];
  $entity = isset($element['#entity']) ? $element['#entity'] : NULL;
  $handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);

  // We need to grab the items from $form_state['values'], because the $items
  // passed into this function contains the old form data and not the newly
  // saved data which we saved in the validate function.
  if (array_key_exists('values', $form_state)
    && array_key_exists($field['field_name'], $form_state['values'])) {
    $items = $form_state['values'][$field['field_name']];
    $items = isset($items[$langcode]) ? $items[$langcode] : array();
  }

  $entity_ids = array();

  // Build an array of entities ID.
  foreach ($items as $item) {
    $entity_ids[] = $item['target_id'];
  }

  $pre_populate = array();

  // Load those entities and loop through them to extract their labels.
  $entities = entity_load($field['settings']['target_type'], $entity_ids);

  foreach ($entities as $entity_id => $entity_item) {
    $label = $handler->getLabel($entity_item);
    $pre_populate[] = array('id' => intval($entity_id), 'name' => check_plain($label));
  }

  $pre_populate = drupal_json_encode($pre_populate);
  $pre_populate = !empty($entity_ids) ? $pre_populate : 'null';

  // Prepare the autocomplete path.
  if (!empty($instance['widget']['settings']['path'])) {
    $autocomplete_path = $instance['widget']['settings']['path'];
  }
  else {
    $autocomplete_path = base_path() . 'entityreference/autocomplete/tokeninput';
  }

  $autocomplete_path .= '/' . $field['field_name'] . '/' . $instance['entity_type'] . '/' . $instance['bundle'] . '/';
  // Use <NULL> as a placeholder in the URL when we don't have an entity.
  // Most webservers collapse two consecutive slashes.
  $id = 'NULL';
  if ($entity) {
    list($eid) = entity_extract_ids($entity_type, $entity);
    if ($eid) {
      $id = $eid;
    }
  }
  $autocomplete_path .= $id;

  // Set the default value.
  $default_value = implode(',', $entity_ids);

  // Set the token limit based on the field's cardinality.
  $token_limit = $field['cardinality'] > 0 ? $field['cardinality'] : 'null';

  $theme = $instance['widget']['settings']['theme'];

  // Add our JavaScript/CSS libraries.
  $path = libraries_get_path('tokeninput');
  if ($path) {
    drupal_add_js($path . '/src/jquery.tokeninput.js');
    drupal_add_css(drupal_get_path('module', 'tokeninput_entityreference') . '/tokeninput_entityreference_custom.css');
    drupal_add_css($path . '/styles/token-input-facebook.css');
    drupal_add_css($path . '/styles/token-input-mac.css');
    drupal_add_css($path . '/styles/token-input.css');
  }

  if ($instance['widget']['type'] == 'tokeninput_entityreference') {
    $element += array(
      '#type' => 'textfield',
      '#default_value' => $default_value,
      // Allow a slightly larger size that the field length to allow for some
      // configurations where all characters won't fit in input field.
      '#size' => 60,
      '#maxlength' => 1024,
      '#prefix' => "<div class='tokeninput_entityreference'>",
      // Insert our javascript to make the input element into a
      // tokenInput field.
      '#suffix' => "</div><script type='text/javascript'>jQuery('.tokeninputfield').makeFieldTokenInput();</script>",
      '#attributes' => array(
        'class' => array(
          'tokeninputfield',
        ),
        'autocompletePath' => $autocomplete_path,
        'prePopulate' => $pre_populate,
        'tokenLimit' => $token_limit,
        'theme' => $theme,
      ),
      '#element_validate' => array('tokeninput_entityreference_validate'),
    );

    // This function calls the appropriate function to make all the correct
    // fields on the page into tokenInput fields.
    $element['#attached']['js'] = array("(function ($) {
$.fn.makeFieldTokenInput = function() {
  $('.tokeninputfield').each(function () {
    // Only call this function once on each element
    if ($(this).data('tokeninputized') == 'true') {
        return;
    }
    $(this).data('tokeninputized', 'true');
    var prePopulate = $(this).attr('prePopulate');
    var tokenLimit = $(this).attr('tokenLimit');
    var theme = $(this).attr('theme');

    //console.log('prePopulate', prePopulate);
    //console.log('tokenLimit', tokenLimit);
    prePopulate = prePopulate ? JSON.parse(prePopulate) : null;
    tokenLimit = tokenLimit != 'null' ? parseInt(tokenLimit) : null;
    theme = theme ? theme : '';

    // For some reason the 'Type to Search' drop-down remains shown,
    // so we hide it.
    $('.token-input-dropdown' + (theme ? '-' + theme : '')).hide();

    $(this).tokenInput(
      $(this).attr('autocompletePath'), 
      {
        preventDuplicates: true,
        queryParam: 'query',
        tokenLimit: tokenLimit,
        theme: theme,
        prePopulate: prePopulate,
    	hintText: 'Indtast navnet på den du ønsker at spørge',
    	noResultsText: 'Ingen resultater',
    	searchingText: 'Søger…',	
      }
    );
  });
};

// Always show the submit button for editablefields forms,
// even if there's only 1 editable field.
Drupal.behaviors.always_show_editablefields_submit = {
  attach: function (context) {
    $('.editablefield-item').once('editablefield', function() {
      // Always show the submit button
      $(this).find('input.form-submit').show();
      $(this).find('input[type=text],input[type=radio],textarea,select').change(function() {});
    });
  }
};
})(jQuery);"
      => array('type' => 'inline', 'scope' => 'header', 'weight' => 5));
  }

  return $element;
}

/**
 * Insert our AJAX commands.
 * 
 * @param type $commands
 */
function tokeninput_entityreference_ajax_render_alter(&$commands) {
  // Make the new input field into a tokenInput field
  $commands[] = ajax_command_invoke('.tokeninputfield', 'makeFieldTokenInput');
  // Focus the replaced input field
  $commands[] = ajax_command_invoke('.tokeninputfield', 'focus');
}

/**
 * Implements hook_field_widget_info_alter().
 */
function tokeninput_entityreference_field_widget_info_alter(&$info) {
  if (module_exists('options')) {
    $info['options_select']['field types'][] = 'entityreference';
    $info['options_buttons']['field types'][] = 'entityreference';
  }
}

/**
 * AJAX autocomplete callback, to provide JSON results for tokeninput field..
 */
function tokeninput_entityreference_callback($type, $field_name, $entity_type, $bundle_name, $entity_id = '') {
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle_name);

  $entity = NULL;
  if ($entity_id !== 'NULL') {
    $entity = entity_load_single($entity_type, $entity_id);
    if (!$entity || !entity_access('view', $entity_type, $entity)) {
      return MENU_ACCESS_DENIED;
    }
  }

  $handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);

  $input = isset($_GET['query']) ? $_GET['query'] : '';
  $input = drupal_strtolower(trim($input));

  // Get an array of matching entities.
  $entity_labels = $handler->getReferencableEntities($input, $instance['widget']['settings']['match_operator'], 10);

  // Build the matches array to be sent as JSON
  $matches = array();

  foreach ($entity_labels as $values) {
    foreach ($values as $entity_id => $label) {
      $matches[] = array('id' => $entity_id, 'name' => check_plain($label));
    }
  }

  drupal_json_output($matches);
}

function tokeninput_entityreference_validate($element, &$form_state, &$form) {
  $value = array();

  $field = field_info_field($element['#field_name']);

  // If a value was entered into the autocomplete...
  if (!empty($element['#value'])) {
    $entities = array_unique(explode(',', $element['#value']));

    $value = array();
    foreach ($entities as $entity) {
      $value[] = array(
        'target_id' => intval($entity),
      );
    }
  }

  // Update the value of this element so the field can validate the product IDs.
  form_set_value($element, $value, $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
function tokeninput_entityreference_field_widget_error($element, $error) {
  form_error($element, $error['message']);
}
